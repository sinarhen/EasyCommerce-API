{
	"info": {
		"_postman_id": "c6a5684b-9edf-431f-8d89-315a1df254a7",
		"name": "Admin",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24030809",
		"_collection_link": "https://www.postman.com/warped-zodiac-240076/workspace/ecommerce/collection/24030809-c6a5684b-9edf-431f-8d89-315a1df254a7?action=share&source=collection_link&creator=24030809"
	},
	"item": [
		{
			"name": "RegisterUser Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseBody = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"\r",
							"});\r",
							"\r",
							"var responseEmail = responseBody.email;\r",
							"var responseToken = responseBody.token;\r",
							"\r",
							"var reqBody = JSON.parse(pm.request.body.raw)\r",
							"var requestPassword = reqBody.password;\r",
							"\r",
							"pm.collectionVariables.set(\"createdUserId\", responseBody.id)\r",
							"pm.collectionVariables.set(\"createdUserEmail\", responseEmail);\r",
							"pm.collectionVariables.set(\"createdUserToken\", responseToken);\r",
							"pm.collectionVariables.set(\"createdUserPassword\", requestPassword\r",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"userName\": \"{{$randomUserName}}\",\r\n  \"firstName\": \"{{$randomFullName}}\",\r\n  \"lastName\": \"{{$randomLastName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"{{$randomPassword}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/auth/register",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"auth",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "LoginAsAdmin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseToken = pm.response.json().token;\r",
							"\r",
							"pm.collectionVariables.set(\"adminToken\", responseToken)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"{{adminEmail}}\",\r\n    \"password\": \"{{adminPassword}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/auth/login",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetAllUsers",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{adminToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/api/admin/users",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"admin",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetTestUser",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{adminToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/api/admin/users/{{createdUserId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"admin",
						"users",
						"{{createdUserId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "BanTestUser",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{adminToken}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"reason\": \"Dolboeb\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/admin/users/{{createdUserId}}/ban",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"admin",
						"users",
						"{{createdUserId}}",
						"ban"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetTestUserIsBanned",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{adminToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/api/admin/users/{{createdUserId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"admin",
						"users",
						"{{createdUserId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetBannedUsers",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{adminToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/api/admin/banned-users",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"admin",
						"banned-users"
					]
				}
			},
			"response": []
		},
		{
			"name": "UnBanTestUser Copy",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{adminToken}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"url": {
					"raw": "{{host}}/api/admin/users/{{createdUserId}}/unban",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"admin",
						"users",
						"{{createdUserId}}",
						"unban"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetUserInfo",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{adminToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/api/admin/users/{{createdUserId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"admin",
						"users",
						"{{createdUserId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdateUserRole",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{adminToken}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"role\": \"Customer\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/admin/users/{{createdUserId}}/role",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"admin",
						"users",
						"{{createdUserId}}",
						"role"
					]
				}
			},
			"response": []
		},
		{
			"name": "LoginUser Copy",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - token and expiration\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.token).to.exist;\r",
							"    pm.expect(responseData.expiration).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Token is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Expiration is in a valid date format\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.expiration).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$/, \"Expiration should be in valid date format\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"{{createdUserEmail}}\",\r\n    \"password\": \"{{createdUserPassword}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/auth/login",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "DeleteTestUser",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{adminToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{host}}/api/admin/users/{{createdUserId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"admin",
						"users",
						"{{createdUserId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetTestUserIsBanned Copy 2",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{adminToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/api/admin/users/{{createdUserId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"admin",
						"users",
						"{{createdUserId}}"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "adminToken",
			"value": ""
		},
		{
			"key": "createdUserEmail",
			"value": ""
		},
		{
			"key": "createdUserToken",
			"value": ""
		},
		{
			"key": "createdUserPassword",
			"value": ""
		},
		{
			"key": "createdUserId",
			"value": ""
		}
	]
}